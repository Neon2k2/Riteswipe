name: RiteSwipe CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  AZURE_WEBAPP_NAME: app-riteswipe-api
  AZURE_WEBAPP_PACKAGE_PATH: 'RiteSwipe.Api/publish'
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  build-and-test-api:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

    - name: Publish coverage
      uses: codecov/codecov-action@v3

    - name: Publish API
      run: dotnet publish RiteSwipe.Api/RiteSwipe.Api.csproj -c Release -o ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: api-artifact
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  build-and-test-web:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: ./RiteSwipe.Web
      run: npm ci

    - name: Run tests
      working-directory: ./RiteSwipe.Web
      run: npm test -- --coverage

    - name: Build
      working-directory: ./RiteSwipe.Web
      run: npm run build

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: web-artifact
        path: RiteSwipe.Web/build

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-and-test-api, build-and-test-web]
    steps:
    - uses: actions/checkout@v3

    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'https://app-riteswipe-api-${{ github.ref_name }}.azurewebsites.net'

    - name: Run Snyk scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init
      working-directory: ./infrastructure

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: ./infrastructure
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve tfplan
      working-directory: ./infrastructure

  deploy-api:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: api-artifact
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  deploy-web:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: web-artifact
        path: ./web-build

    - name: Deploy to Static Web App
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "./web-build"
        skip_app_build: true

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    if: always()
    steps:
    - name: Notify Teams
      uses: aliencube/microsoft-teams-actions@v0.8.0
      with:
        webhook_uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
        title: "Deployment Status"
        message: "Deployment of RiteSwipe ${{ github.ref_name }} completed with status: ${{ job.status }}"
